──────────────────────────────
1. City.java
──────────────────────────────

This file defines the data model for a City.

--------------------------------------------------
/* City.java */
import org.json.JSONObject;

public class City {
    private int id;
    private String name;
    private String countryCode;
    private String district;
    private int population;

    // Construct from a JSONObject
    public City(JSONObject json) {
        // We assume the JSON keys match the database columns
        this.id = json.getInt("ID");
        this.name = json.getString("Name");
        this.countryCode = json.getString("CountryCode");
        this.district = json.getString("District");
        this.population = json.getInt("Population");
    }

    // Getters for fields (if needed)
    public int getId() { return id; }
    public String getName() { return name; }
    public String getCountryCode() { return countryCode; }
    public String getDistrict() { return district; }
    public int getPopulation() { return population; }

    // Custom presentation method to show city data in a friendly format
    public String toFormattedString() {
        return "City ID: " + id + "\n"
             + "City Name: " + name + "\n"
             + "Country Code: " + countryCode + "\n"
             + "District: " + district + "\n"
             + "Population: " + population + "\n";
    }
}
--------------------------------------------------

──────────────────────────────
2. APIClient.java
──────────────────────────────

This file is responsible for fetching the JSON data from the URL.

--------------------------------------------------
/* APIClient.java */
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.stream.Collectors;

public class APIClient {
    private String urlString;

    public APIClient(String urlString) {
        this.urlString = urlString;
    }

    public String fetchData() throws Exception {
        URL url = new URL(urlString);
        System.out.println("Sending request...");
        InputStream is = url.openStream();
        System.out.println("Receiving response...");
        String source = new BufferedReader(new InputStreamReader(is))
                .lines()
                .collect(Collectors.joining("\n"));
        return source;
    }
}
--------------------------------------------------

──────────────────────────────
3. Main.java
──────────────────────────────

This file contains the presentation logic: it fetches the JSON data, builds City objects, and prints them.

--------------------------------------------------
/* Main.java */
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        try {
            // Set the URL to your REST API endpoint
            String temp_url = "http://your-api-address/cities_api";
            APIClient client = new APIClient(temp_url);

            System.out.println("Fetching data...");
            String source = client.fetchData();

            System.out.println("Processing data...");
            JSONObject json = new JSONObject(source);
            JSONArray jsonCities = json.getJSONArray("cities");

            // Create a list to store the parsed City objects
            List<City> cities = new ArrayList<>();
            for (int i = 0; i < jsonCities.length(); i++) {
                JSONObject cityJson = jsonCities.getJSONObject(i);
                City city = new City(cityJson);
                cities.add(city);
            }

            // Display friendly output for each City retrieved from the JSON array
            if(cities.isEmpty()){
                System.out.println("No cities found.");
            } else {
                System.out.println("City Data:");
                for (City city : cities) {
                    System.out.println("------------------------------");
                    System.out.println(city.toFormattedString());
                }
            }
        } catch (Exception e) {
            System.err.println("An unexpected error occurred!");
            e.printStackTrace(System.err);
        }
    }
}
--------------------------------------------------

──────────────────────────────
Explanation
──────────────────────────────

1. City.java
   • The City class models the city record with properties: id, name, countryCode, district, and population.
   • The constructor consumes a JSONObject and extracts the corresponding fields.
   • The toFormattedString() method returns a nicely formatted string (without JSON raw formatting) for display.

2. APIClient.java
   • Separates the logic for fetching JSON data from the URL.
   • This allows for easier future modifications or testing.

3. Main.java
   • Creates an APIClient instance using the defined URL.
   • Fetches the JSON data, processes it to obtain an array of cities, and builds a list of City objects.
   • Loops through all City objects and prints their details using the City’s toFormattedString() method.

By dividing the code into these classes, we successfully separate the application’s logic (data retrieval and model representation) from its presentation (displaying formatted data).
